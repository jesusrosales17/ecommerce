// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

}

enum Role {
  ADMIN 
  USER
}

 
model User {
  id            String          @id @default(uuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          Role           @default(USER)
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart Cart[]
  Favorite Favorite[]
  Address Address[]
  Order Order[]
  @@map("user")
}
 
model Account {
  id                       String  @id @default(uuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtoken")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
  @@map("authenticator")
}


enum CategoryStatus {
  ACTIVE
  INACTIVE
  DELETED
}
// categories
model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  products    Product[]
  status      CategoryStatus @default(ACTIVE)  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  @@index([name])
    @@map("category")
}
enum ProductStatus {
  ACTIVE
  INACTIVE
  DELETED
}
// products
model Product {
  id          String   @id @default(uuid())
  name        String @db.Text
  description String? @db.LongText
  price       Decimal @db.Decimal(10, 2)
  stock       Int? @default(0)
  brand       String?
  color       String?
  isOnSale    Boolean? @default(false)
  salePrice   Decimal? @db.Decimal(10, 2)
  isFeatured  Boolean? @default(false)
  status      ProductStatus @default(ACTIVE)
  categoryId String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
   category  Category? @relation(fields: [categoryId], references: [id])
  images ProductImage[]
  specifications ProductSpecification[]

  CartItem CartItem[]
  Favorite Favorite[]

  OrderItem OrderItem[]
  @@map("product")
}

// imagenes del produco

model ProductImage{
  id          String   @id @default(uuid())
  name        String
  isPrincipal Boolean? @default(false)
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  Product Product? @relation(fields: [productId], references: [id])
 
  @@index([name])
  @@map("productimage")
}

// especificaciones del producto
model ProductSpecification{
  id          String   @id @default(uuid())
  name        String
  value       String
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  Product Product? @relation(fields: [productId], references: [id])
 
  @@index([name])
  @@map("productspecification")
}

// Carrito de compras
model Cart {
  id          String   @id @default(uuid())
  userId      String
  items       CartItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id])
 
  @@index([userId])
  @@map("cart")
}

// Items del carrito de compras
model CartItem {
  id          String   @id @default(uuid())
  productId   String
  quantity    Int      @default(1)
  cartId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  Product Product? @relation(fields: [productId], references: [id])
  Cart Cart? @relation(fields: [cartId], references: [id])
 
  @@index([productId])
  @@map("cartitem")
}

// Favoritos de usuarios
model Favorite {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  User User @relation(fields: [userId], references: [id])
  Product Product @relation(fields: [productId], references: [id])
 
  @@index([userId])
  @@index([productId])
  @@map("favorite")
}

// Direcciones de envío
model Address {
  id          String   @id @default(uuid())
  userId      String
  name        String
  street      String
  city        String
  state       String
  postalCode  String
  country     String   @default("México")
  phone       String
  reference   String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  User User @relation(fields: [userId], references: [id])
  Order Order[]
 
  @@index([userId])
  @@map("address")
}

// Estado de órdenes
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Órdenes de compra
model Order {
  id            String      @id @default(uuid())
  userId        String
  addressId     String
  total         Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  paymentId     String?     // ID de la transacción en Stripe
  paymentStatus String?     // Estado del pago en Stripe
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
 
  User    User    @relation(fields: [userId], references: [id])
  Address Address @relation(fields: [addressId], references: [id])
  items   OrderItem[]
 
  @@index([userId])
  @@index([addressId])
  @@map("order")
}

// Items de órdenes
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  name      String   // Guardamos el nombre en caso de que el producto cambie después
  price     Decimal  @db.Decimal(10, 2) // Precio al momento de la compra
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  Order   Order   @relation(fields: [orderId], references: [id])
  Product Product @relation(fields: [productId], references: [id])
 
  @@index([orderId])
  @@index([productId])
  @@map("orderitem")
}

// Tokens para recuperación de contraseña
model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
  @@map("passwordresettoken")
}